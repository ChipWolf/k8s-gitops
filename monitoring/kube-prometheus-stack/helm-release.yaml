---
apiVersion: helm.fluxcd.io/v1
kind: HelmRelease
metadata:
  annotations:
    fluxcd.io/automated: "false"
    fluxcd.io/ignore: "false"
    fluxcd.io/tag.grafana: "semver:~7"
  name: kube-prometheus-stack
  namespace: monitoring
spec:
  chart:
    name: kube-prometheus-stack
    repository: "https://prometheus-community.github.io/helm-charts"
    version: 9.4.10
  forceUpgrade: true
  releaseName: kube-prometheus-stack
  rollback:
    enable: true
  values:
    alertmanager:
      alertmanagerSpec:
        storage:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 2Gi
              storageClassName: local-path
        tolerations:
          - key: "arm"
            operator: "Exists"
      config:
        inhibit_rules:
          - equal:
              - alertname
              - namespace
            source_match:
              severity: critical
            target_match:
              severity: warning
        route:
          receiver: slack-notifications
          routes:
            - match:
                alertname: Watchdog
              receiver: "null"
            - receiver: slack-notifications
        templates:
          - "*.tmpl"
      ingress:
        annotations:
          kubernetes.io/ingress.class: nginx
        enabled: true
        hosts:
          - prom-alert.starbs.net
        tls:
          - hosts:
              - prom-alert.starbs.net
    grafana:
      additionalDataSources:
        - access: proxy
          isDefault: true
          name: Prometheus
          type: prometheus
          url: "http://thanos-query-http:10902/"
        - access: proxy
          name: loki
          type: loki
          url: "http://loki.logs.svc.cluster.local:3100"
      dashboardProviders:
        dashboardproviders.yaml:
          apiVersion: 1
          providers:
            - disableDeletion: false
              editable: true
              folder: ""
              name: default
              options:
                path: /var/lib/grafana/dashboards/default
              orgId: 1
              type: file
      dashboards:
        default:
          1-node-exporter:
            datasource: Prometheus
            url: "https://grafana.com/api/dashboards/11074/revisions/4/download"
          blocky:
            datasource: Prometheus
            url: "https://raw.githubusercontent.com/0xERR0R/blocky/master/docs/blocky-grafana.json"
          home-assistant:
            datasource: Prometheus
            url: "https://grafana.com/api/dashboards/12705/revisions/3/download"
          nginx-dashboard:
            datasource: Prometheus
            url: "https://raw.githubusercontent.com/kubernetes/ingress-nginx/master/deploy/grafana/dashboards/nginx.json"
          uptimerobot:
            datasource: Prometheus
            url: "https://raw.githubusercontent.com/lekpamartin/uptimerobot_exporter/master/dashboards/grafana.json"
          vernemq:
            datasource: Prometheus
            url: "https://raw.githubusercontent.com/vernemq/vernemq/master/metrics_scripts/grafana/VerneMQ%20Node%20Metrics.json"
      deploymentStrategy:
        type: Recreate
      env:
        GF_DISABLE_SANITIZE_HTML: true
        GF_EXPLORE_ENABLED: true
        GF_PANELS_DISABLE_SANITIZE_HTML: true
        VAR_BLOCKY_URL: "http://blocky.default.svc.cluster.local:4000"
      grafana.ini:
        analytics:
          check_for_updates: true
        auth.anonymous:
          enabled: true
          org_role: Admin
        grafana_net:
          url: "https://grafana.net"
        log:
          mode: console
        paths:
          data: /var/lib/grafana/data
          logs: /var/log/grafana
          plugins: /var/lib/grafana/plugins
          provisioning: /etc/grafana/provisioning
        server:
          root_url: "https://grafana.starbs.net"
      ingress:
        annotations:
          kubernetes.io/ingress.class: nginx
        enabled: true
        hosts:
          - grafana.starbs.net
        tls:
          - hosts:
              - grafana.starbs.net
      persistence:
        accessModes:
          - ReadWriteOnce
        enabled: true
        size: 2Gi
        storageClassName: local-path
      plugins:
        - natel-discrete-panel
        - pr0ps-trackmap-panel
        - grafana-piechart-panel
        - "https://github.com/panodata/grafana-map-panel/releases/download/0.9.0/grafana-map-panel-0.9.0.zip;grafana-worldmap-panel-ng"
      sidecar:
        dashboards:
          enabled: true
          searchNamespace: ALL
        datasources:
          defaultDatasourceEnabled: false
          enabled: true
    kubeControllerManager:
      enabled: true
      endpoints:
        - 10.2.0.30
    kubeEtcd:
      enabled: false
    kubeProxy:
      enabled: false
    kubeScheduler:
      enabled: true
      endpoints:
        - 10.2.0.30
    kubelet:
      serviceMonitor:
        metricRelabelings:
          - action: replace
            sourceLabels:
              - node
            targetLabel: instance
    nodeExporter:
      serviceMonitor:
        relabelings:
          - action: replace
            regex: (.*)
            replacement: $1
            sourceLabels:
              - __meta_kubernetes_pod_node_name
            targetLabel: kubernetes_node
    prometheus:
      ingress:
        annotations:
          kubernetes.io/ingress.class: nginx
        enabled: true
        hosts:
          - prom-server.starbs.net
        tls:
          - hosts:
              - prom-server.starbs.net
      prometheusSpec:
        enableAdminAPI: true
        podMonitorNamespaceSelector: {}
        podMonitorSelector: {}
        podMonitorSelectorNilUsesHelmValues: false
        replicaExternalLabelName: replica
        replicas: 1 #2
        retention: 6h
        ruleNamespaceSelector: {}
        ruleSelector: {}
        ruleSelectorNilUsesHelmValues: false
        serviceMonitorNamespaceSelector: {}
        serviceMonitorSelector: {}
        serviceMonitorSelectorNilUsesHelmValues: false
        storageSpec:
          volumeClaimTemplate:
            spec:
              resources:
                requests:
                  storage: 2Gi
              storageClassName: local-path
        thanos:
          objectStorageConfig:
            key: object-store.yaml
            name: thanos
          version: v0.15.0
        tolerations:
          - key: "arm"
            operator: "Exists"
    prometheus-node-exporter:
      tolerations:
        - key: "arm"
          operator: "Exists"
    prometheusOperator:
      createCustomResource: true
    server:
      resources:
        limits:
          memory: 2000Mi
        requests:
          cpu: 25m
          memory: 1500Mi
  valuesFrom:
    - secretKeyRef:
        name: kube-prometheus-helm-values
